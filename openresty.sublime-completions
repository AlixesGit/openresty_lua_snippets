
{
	"scope": "source.lua",
	"completions": 
	[
		
		{ "trigger": "ngx.arg[index]", "contents": "ngx.arg[${1:index}]" }, 
		{ "trigger": "ngx.var.VAR_NAME", "contents": "ngx.var.${1:VAR_NAME}" }, 
		{ "trigger": "ngx.ctx.VAR_NAME", "contents": "ngx.ctx.${1:VAR_NAME}" }, 
		{ "trigger": "ngx.location.capture(url)", "contents": "ngx.location.capture(${1:url})" }, 
		{ "trigger": "ngx.location.capture_multi({url}, {url})", "contents": "ngx.location.capture_multi({${1:url}}, {${2:url}})" }, 
		{ "trigger": "ngx.status", "contents": "ngx.status" }, 

		{ "trigger": "ngx.header.HEADER", "contents": "ngx.header.${1:head}" }, 
		{ "trigger": "ngx.resp.get_headers()", "contents": "ngx.resp.get_headers()" }, 
		{ "trigger": "ngx.req.start_time()", "contents": "ngx.req.start_time()" }, 
		{ "trigger": "ngx.req.http_version()", "contents": "ngx.req.http_version()" }, 
		{ "trigger": "ngx.req.raw_header()", "contents": "ngx.req.raw_header()" }, 
		{ "trigger": "ngx.req.get_method()", "contents": "ngx.req.get_method()" }, 
		{ "trigger": "ngx.req.set_method(method_id)", "contents": "ngx.req.set_method(${1:method_id})" }, 
		{ "trigger": "ngx.req.set_uri(uri)", "contents": "ngx.req.set_uri(${1:uri})" },  
		{ "trigger": "ngx.req.set_uri_args(args)", "contents": "ngx.req.set_uri_args(${1:args})" },
		{ "trigger": "ngx.req.get_uri_args()", "contents": "ngx.req.get_uri_args()" }, 
		{ "trigger": "ngx.req.get_post_args()", "contents": "ngx.req.get_post_args()" }, 
		{ "trigger": "ngx.req.get_headers()", "contents": "ngx.req.get_headers()" }, 
		{ "trigger": "ngx.req.set_header(header_name, header_value)", "contents": "ngx.req.set_header(${1:header_name}, ${2:header_value})" },
		{ "trigger": "ngx.req.clear_header(header_name)", "contents": "ngx.req.clear_header(${1:header_name})" },



		{ "trigger": "ngx.req.read_body()", "contents": "ngx.req.read_body()" }, 
		{ "trigger": "ngx.req.discard_body()", "contents": "ngx.req.discard_body()" },
		{ "trigger": "ngx.req.get_body_data()", "contents": "ngx.req.get_body_data()" }, 
		{ "trigger": "ngx.req.get_body_file()", "contents": "ngx.req.get_body_file()" }, 
		{ "trigger": "ngx.req.set_body_data(data)", "contents": "ngx.req.set_body_data(${1:data})" },
		{ "trigger": "ngx.req.set_body_file(file_name)", "contents": "ngx.req.set_body_file(${1:file_name})" },
		{ "trigger": "ngx.req.init_body()", "contents": "ngx.req.init_body()" }, 
		{ "trigger": "ngx.req.append_body(data_chunk)", "contents": "ngx.req.append_body(${1:data_chunk})" }, 
		{ "trigger": "ngx.req.finish_body()", "contents": "ngx.req.finish_body()" }, 
		{ "trigger": "ngx.req.socket()", "contents": "ngx.req.socket()" }, 
		{ "trigger": "ngx.exec(uri)", "contents": "ngx.exec(${1:uri})" },
		{ "trigger": "ngx.redirect(uri)", "contents": "ngx.redirect(${1:uri})" },
		{ "trigger": "ngx.send_headers()", "contents": "ngx.send_headers()" },
		{ "trigger": "ngx.headers_sent", "contents": "ngx.headers_sent" },
		{ "trigger": "ngx.print(...)", "contents": "ngx.print(${1:...})" },
		{ "trigger": "ngx.say(...)", "contents": "ngx.say(${1:...})" },
		{ "trigger": "ngx.log(log_level, ...)", "contents": "ngx.log(${1:log_level}, ${2:...})" },
		{ "trigger": "ngx.flush(wait?)", "contents": "ngx.flush(${1:wait?})" },
		{ "trigger": "ngx.exit(status)", "contents": "ngx.exit(${1:status})" },
		{ "trigger": "ngx.eof()", "contents": "ngx.eof()" }, 
		{ "trigger": "ngx.sleep(seconds)", "contents": "ngx.sleep(${1:seconds})" },
		{ "trigger": "ngx.escape_uri(str)", "contents": "ngx.escape_uri(${1:str})" },
		{ "trigger": "ngx.unescape_uri(str)", "contents": "ngx.unescape_uri(${1:str})" },
		{ "trigger": "ngx.encode_args(table)", "contents": "ngx.encode_args(${1:table})" },
		{ "trigger": "ngx.decode_args(str)", "contents": "ngx.decode_args(${1:str})" },
		{ "trigger": "ngx.encode_base64(str)", "contents": "ngx.encode_base64(${1:str})" },
		{ "trigger": "ngx.decode_base64(str)", "contents": "ngx.decode_base64(${1:str})" },
		{ "trigger": "ngx.crc32_short(str)", "contents": "ngx.crc32_short(${1:str})" },
		{ "trigger": "ngx.crc32_long(str)", "contents": "ngx.crc32_long(${1:str})" },
		{ "trigger": "ngx.hmac_sha1(secret_key, str)", "contents": "ngx.hmac_sha1(${1:secret_key}, ${2:str})" },
		{ "trigger": "ngx.md5(str)", "contents": "ngx.md5(${1:str})" },
		{ "trigger": "ngx.md5_bin(str)", "contents": "ngx.md5_bin(${1:str})" },
		{ "trigger": "ngx.sha1_bin(str)", "contents": "ngx.sha1_bin(${1:str})" },
		{ "trigger": "ngx.quote_sql_str(raw_value)", "contents": "ngx.quote_sql_str(${1:raw_value})" },
		{ "trigger": "ngx.today()", "contents": "ngx.today()" }, 
		{ "trigger": "ngx.time()", "contents": "ngx.time()" }, 
		{ "trigger": "ngx.now()", "contents": "ngx.now()" },  
		{ "trigger": "ngx.update_time()", "contents": "ngx.update_time()" }, 
		{ "trigger": "ngx.localtime()", "contents": "ngx.localtime()" }, 
		{ "trigger": "ngx.utctime()", "contents": "ngx.utctime()" }, 
		{ "trigger": "ngx.cookie_time(sec)", "contents": "ngx.cookie_time(${1:sec})" }, 
		{ "trigger": "ngx.http_time(sec)", "contents": "ngx.http_time(${1:sec})" }, 
		{ "trigger": "ngx.parse_http_time(sec)", "contents": "ngx.parse_http_time(${1:sec})" }, 
		{ "trigger": "ngx.is_subrequest()", "contents": "ngx.is_subrequest()" },  
		{ "trigger": "ngx.re.match(subject, regex)", "contents": "ngx.re.match(${1:subject}, ${2:regex})" }, 
		{ "trigger": "ngx.re.find(subject, regex)", "contents": "ngx.re.find(${1:subject}, ${2:regex})" }, 
		{ "trigger": "ngx.re.gmatch(subject, regex)", "contents": "ngx.re.gmatch(${1:subject}, ${2:regex})" }, 
		{ "trigger": "ngx.re.sub(subject, regex, replace)", "contents": "ngx.re.sub(${1:subject}, ${2:regex}, ${3:replace})" }, 
		{ "trigger": "ngx.re.gsub(subject, regex, replace)", "contents": "ngx.re.gsub(${1:subject}, ${2:regex}, ${3:replace})" }, 


		{ "trigger": "ngx.shared.DICT", "contents": "ngx.shared.${1:DICT}" }, 
		{ "trigger": "ngx.socket.udp()", "contents": "ngx.socket.udp()" },
		{ "trigger": "ngx.socket.tcp()", "contents": "ngx.socket.tcp()" },
		{ "trigger": "ngx.get_phase()", "contents": "ngx.get_phase()" },

		{ "trigger": "ngx.thread.spawn(fun, ...)", "contents": "ngx.thread.spawn(${1:fun}, ${2:...})" },
		{ "trigger": "ngx.thread.wait(thread1, ...)", "contents": "ngx.thread.wait(${1:thread1}, ${2:...})" },
		{ "trigger": "ngx.on_abort(callback)", "contents": "ngx.on_abort(${1:callback})" }, 
		{ "trigger": "ngx.timer.at(delay, callback, ....)", "contents": "ngx.timer.at(${1:delay}, ${2:callback}, ${3:...})" }, 


		{ "trigger": "ngx.config.debug()", "contents": "ngx.config.debug()" },
		{ "trigger": "ngx.config.prefix()", "contents": "ngx.config.prefix()" },
		{ "trigger": "ngx.config.nginx_version", "contents": "ngx.config.nginx_version" },
		{ "trigger": "ngx.config.nginx_configure()", "contents": "ngx.config.nginx_configure()" },
		{ "trigger": "ngx.config.ngx_lua_version", "contents": "ngx.config.ngx_lua_version" },
		{ "trigger": "ngx.worker.exiting()", "contents": "ngx.worker.exiting()" },
		{ "trigger": "ngx.worker.pid()", "contents": "ngx.worker.pid()" },


		{ "trigger": "ndk.set_var.set_quote_sql_str(str)", "contents": "ndk.set_var.set_quote_sql_str(${1:str})" },
		{ "trigger": "ndk.set_var.set_quote_pgsql_str(str)", "contents": "ndk.set_var.set_quote_pgsql_str(${1:str})" },
		{ "trigger": "ndk.set_var.set_quote_json_str(str)", "contents": "ndk.set_var.set_quote_json_str(${1:str})" },
		{ "trigger": "ndk.set_var.set_unescape_uri(str)", "contents": "ndk.set_var.set_unescape_uri(${1:str})" },
		{ "trigger": "ndk.set_var.set_escape_uri(str)", "contents": "ndk.set_var.set_escape_uri(${1:str})" },
		{ "trigger": "ndk.set_var.set_encode_base32(str)", "contents": "ndk.set_var.set_encode_base32(${1:str})" },
		{ "trigger": "ndk.set_var.set_decode_base32(str)", "contents": "ndk.set_var.set_decode_base32(${1:str})" },
		{ "trigger": "ndk.set_var.set_encode_base64(str)", "contents": "ndk.set_var.set_encode_base64(${1:str})" },
		{ "trigger": "ndk.set_var.set_decode_base64(str)", "contents": "ndk.set_var.set_decode_base64(${1:str})" },
		{ "trigger": "ndk.set_var.set_encode_hex(str)", "contents": "ndk.set_var.set_encode_hex(${1:str})" },
		{ "trigger": "ndk.set_var.set_decode_hex(str)", "contents": "ndk.set_var.set_decode_hex(${1:str})" },
		{ "trigger": "ndk.set_var.set_sha1(str)", "contents": "ndk.set_var.set_sha1(${1:str})" }, 
		{ "trigger": "ndk.set_var.set_md5(str)", "contents": "ndk.set_var.set_md5(${1:str})" }		
	]
}
